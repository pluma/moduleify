{"name":"Moduleify","tagline":"A browserify transform for shimming globals-polluting libraries.","body":"# Synopsis\r\n\r\n**moduleify** is a [browserify](https://github.com/substack/node-browserify) transform for shimming globals-polluting libraries.\r\n\r\n[![Build Status](https://travis-ci.org/pluma/moduleify.png?branch=master)](https://travis-ci.org/pluma/moduleify) [![NPM version](https://badge.fury.io/js/moduleify.png)](http://badge.fury.io/js/moduleify) [![Dependencies](https://david-dm.org/pluma/moduleify.png)](https://david-dm.org/pluma/moduleify)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install moduleify\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/moduleify.git\r\ncd moduleify\r\nnpm install\r\nmake test\r\n```\r\n\r\n# Basic usage example\r\n\r\n## example/vendor/angular.js\r\n\r\n```javascript\r\nangular = {awesome: true};\r\n// No CommonJS export, just a global\r\n```\r\n\r\n## example/app.js\r\n\r\n```javascript\r\nvar ng = require('./vendor/angular');\r\nconsole.log(ng); // {awesome: true}\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    moduleify = require('moduleify'),\r\n    b = browserify();\r\n\r\nb.transform(moduleify({\r\n    \"vendor/angular.js\": \"angular\"\r\n}));\r\nb.add('./app.js');\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n# API\r\n\r\n## moduleify(rules):transform\r\n\r\nCreates a browserify transform that will append `module.exports` statements\r\nto all matching files.\r\n\r\nIf `rules` is an object, each filename will be checked against its keys.\r\nIf one of the keys is contained in the filename, the global with the name\r\nmatching the value the key is mapped to will be exported.\r\n\r\n```javscript\r\nmoduleify({\r\n    \"vendor/angular.js\": \"angular\",\r\n    \"jquery\": \"$\"\r\n});\r\n```\r\n\r\nAlternatively `rules` can be an array containing tuples of paths and names.\r\nEach filename will be checked against each path. The path can either be\r\na string to be found in the filename or a regular expression to test against.\r\n\r\nIn either case path separators in the filename will be converted to slashes\r\nbefore testing for matches.\r\n\r\n```javascript\r\nmoduleify([\r\n    [\"vendor/angular\", \"angular\"],\r\n    [/vendor\\/jquery(-\\d+(\\.\\d+)+)?\\.js$/, \"$\"]\r\n]);\r\n```\r\n\r\n# License\r\n\r\nThe MIT/Expat license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}